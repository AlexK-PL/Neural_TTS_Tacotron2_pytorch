Generator :
 Generator(
  (generator): Sequential(
    (0): ReflectionPad1d((3, 3))
    (1): Conv1d(80, 512, kernel_size=(7,), stride=(1,))
    (2): LeakyReLU(negative_slope=0.2)
    (3): ConvTranspose1d(512, 256, kernel_size=(16,), stride=(8,), padding=(4,))
    (4): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((1, 1))
        (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (5): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((3, 3))
        (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), dilation=(3,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (6): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((9, 9))
        (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), dilation=(9,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (7): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((27, 27))
        (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), dilation=(27,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (8): LeakyReLU(negative_slope=0.2)
    (9): ConvTranspose1d(256, 128, kernel_size=(10,), stride=(5,), padding=(3,), output_padding=(1,))
    (10): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((1, 1))
        (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    )
    (11): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((3, 3))
        (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), dilation=(3,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    )
    (12): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((9, 9))
        (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), dilation=(9,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    )
    (13): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((27, 27))
        (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), dilation=(27,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    )
    (14): LeakyReLU(negative_slope=0.2)
    (15): ConvTranspose1d(128, 64, kernel_size=(10,), stride=(5,), padding=(3,), output_padding=(1,))
    (16): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((1, 1))
        (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
    )
    (17): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((3, 3))
        (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), dilation=(3,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
    )
    (18): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((9, 9))
        (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), dilation=(9,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
    )
    (19): ResStack(
      (block): Sequential(
        (0): LeakyReLU(negative_slope=0.2)
        (1): ReflectionPad1d((27, 27))
        (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), dilation=(27,))
        (3): LeakyReLU(negative_slope=0.2)
        (4): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (shortcut): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
    )
    (20): LeakyReLU(negative_slope=0.2)
    (21): ReflectionPad1d((3, 3))
    (22): Conv1d(64, 1, kernel_size=(7,), stride=(1,))
    (23): Tanh()
  )
)